#!/usr/bin/python
# Copyright: 2006 Brian Harring <ferringb@gmail.com>
# License: GPL2

from pkgcore.config import load_config
from pkgcore.util.modules import load_module, FailedImport
from pkgcore.util.commandline import generate_restriction
from pkgcore.util.lists import stable_unique
from pkgcore.restrictions import packages
from pkgcore.util.demandload import demandload
demandload(globals(), "os logging time pkgcore.fs.util:normpath pkgcore.util.compatibility:any pkgcore.restrictions.values:StrRegexMatch")
import sys, signal

def exithandler(signum,frame):
	signal.signal(signal.SIGINT, signal.SIG_IGN)
	signal.signal(signal.SIGTERM, signal.SIG_IGN)
	sys.stderr.write("caught signal %i, shutting down\n" % signum)
	sys.exit(1)

def grab_arg(arg, args):
	val = False
	try:
		while True:
			args.remove(arg)
			val = True
	except ValueError:
		pass
	return val

def pop_paired_args(args, arg, msg):
	rets = []
	if not isinstance(arg, (tuple, list)):
		arg = [arg]
	for a in arg:
		try:
			while True:
				i = args.index(a)
				args.pop(i)
				if len(args) == i:
					raise Exception("%s needs to be followed by an arg: %s" % (a, msg))
				rets.append(args.pop(i))
		except ValueError:
			pass
	return rets


def collect_available_checks():
	import pkgcore_checks
	checks = []
	for loc in map(str, pkgcore_checks.__path__):
		for mod in [x for x in os.listdir(loc) if x.endswith(".py")]:
			try:
				module = load_module("pkgcore_checks.%s" % mod[:-3])
			except FailedImport:
				continue
			for name in dir(module):
				if not "report" in name.lower():
					continue
				obj = getattr(module, name)
				if not getattr(obj, "feed_type", False):
					continue
				checks.append(obj)
	checks.sort()
	return checks

def display_checks(checks):
	print "format\n<check_name>\n  <description\n\nknown checks-\n"
	for x in checks:
		print "%s.%s" % (x.__module__, x.__name__)
		if x.__doc__ is not None:
			s = "  %s\n" % "\n  ".join(x.strip() for x in x.__doc__.split("\n"))
			print s.rstrip() + "\n"
		else:
			print "  No Documention\n"

def filter_checks(checks, filter_func):
	for x in checks:
		if filter_func("%s.%s" % (x.__module__, x.__name__)):
			yield x

def install_signal_handlers():
	signal.signal(signal.SIGCHLD, signal.SIG_DFL)
	signal.signal(signal.SIGINT, exithandler)
	signal.signal(signal.SIGTERM, exithandler)
	signal.signal(signal.SIGPIPE, signal.SIG_DFL)


def usage():
	sys.stderr.write("""example: pcheck '/usr/portage' [ --xml ] [ -c <report> ]+ [ atoms ]+

need the arg of the repo to scan, optional --xml to dump xml, and any atoms for filtering

--list-checks: dump to stdout what reports are available to run
-c <report>: run this specific report- either regex pattern of the the reports to run, or a module/class name

""")
	

if __name__ == "__main__":
	args = sys.argv[1:]
	help = grab_arg("-h", args) or grab_arg("--help", args)
	to_xml = grab_arg("--xml", args)
	list_checks = grab_arg("--list-checks", args)

	checks_to_run = []
	for x in pop_paired_args(args, "-c", "must specify a report to run, use --list-checks to see what is available"):
		x = x.lower()
		if not ('+' in x or '*' in x):
			x = "^(?:[^.]+\.)*%s(?:\.[^.]+)*$" % x
		checks_to_run.append(StrRegexMatch(x, CaseSensitive=False))
					
	import pkgcore_checks.base
	checks = collect_available_checks()

	if list_checks:
		display_checks(checks)
		sys.exit(0)

	if checks_to_run:
		checks = list(filter_checks(checks, lambda x: any(True for y in checks_to_run if y.match(x))))

	if help or len(args) < 1:
		usage()
		if help:
			sys.exit(0)
		sys.exit(1)

	repo_name = args.pop(0)
	if args:
		limiters = stable_unique(map(generate_restriction, args))
	else:
		limiters = [packages.AlwaysTrue]
                    
	install_signal_handlers()
	
	conf = load_config()
	try:
		repo = conf.repo[repo_name]
	except KeyError:
		if normpath(repo_name) in conf.repo:
			repo = conf.repo[normpath(repo_name)]
		else:
			sys.stderr.write("Error: repo %s is not a valid reponames\nknown repos- [ %s ]\n" % 
				(repr(repo_name), ", ".join(repr(x) for x in conf.repo.iterkeys())))
			sys.exit(1)
	if not getattr(repo, "base", False):
		sys.stderr.write("\nWarning: repo %s appears to be combined trees, as such some checks will be disabled\n\n" % 
			repo_name)

	if to_xml:
		reporter = pkgcore_checks.base.XmlReporter(sys.stdout)
	else:
		reporter = pkgcore_checks.base.StrReporter(sys.stdout)
	runner = pkgcore_checks.base.Feeder(repo)

	for obj in checks:
		try:
			runner.add_check(obj())
		except SystemExit:
			raise
		except Exception, e:
			logging.error("test %s failed to be added: %s" % (obj, e))
			del e


	start_time = time.time()
	nodes = 0
	sys.stderr.write("checks: %i cat, %i pkg, %i version\n" % (len(runner.cat_checks), \
		len(runner.pkg_checks), len(runner.cpv_checks)))
	if not (runner.cat_checks or runner.pkg_checks or runner.cpv_checks):
		sys.stderr.write("no tests\n")
		sys.exit(1)
	reporter.start()
	for filterer in limiters:
		nodes += runner.run(reporter, filterer)
	runner.finish(reporter)
	reporter.finish()
	elapsed = time.time() - start_time
	minutes = int(elapsed)/60
	seconds = elapsed - (minutes * 60)
	sys.stderr.write("processed %i pkgs: %im%.2fs\n" % (nodes, minutes, seconds))
